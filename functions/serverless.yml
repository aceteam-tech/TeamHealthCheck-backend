service: HealthCheck
frameworkVersion: ">=1.32.0 < 2.0.0"
plugins:
  - serverless-pseudo-parameters
  - serverless-plugin-optimize

provider:
  name: aws
  runtime: nodejs8.10
  region: ${opt:region, 'eu-west-2'}
  memorySize: 128
  tags:
    PROJECT: "HealthCheck"
    REGION: ${self:provider.region}
  stage: ${opt:stage, 'dev'}
  apiGateway:
    restApiId:
      Ref: API
    restApiRootResourceId: {"Fn::GetAtt": ["API", "RootResourceId"]}

package:
  individually: true
  exclude:
    - package.json
    - package-lock.json
functions:

# Teams
  get-my-teams:
    handler: functions/team/get-my-teams.lambda
    description: Returns users teams
    role: {"Fn::GetAtt": ["IAMLambdaRole", "Arn"]}
    events:
      - http:
          path: my-teams
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    environment:
      FUNCTION: get-user-teams
      REGION: ${self:provider.region}
      STAGE: ${self:provider.stage}

  create-team:
    handler: functions/team/create-team.lambda
    description: Create a new team and assign the user who creates it
    role: {"Fn::GetAtt": ["IAMLambdaRole", "Arn"]}
    events:
      - http:
          path: my-teams
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    environment:
      FUNCTION: create-team
      REGION: ${self:provider.region}
      STAGE: ${self:provider.stage}
  join-team:
    handler: functions/team/join-team.lambda
    description: Assign user to the team
    role: {"Fn::GetAtt": ["IAMLambdaRole", "Arn"]}
    events:
      - http:
          path: join-team
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    environment:
      FUNCTION: join-team
      REGION: ${self:provider.region}
      STAGE: ${self:provider.stage}
  remove-from-team:
    handler: functions/team/remove-from-team.lambda
    description: Remove user from the team
    role: {"Fn::GetAtt": ["IAMLambdaRole", "Arn"]}
    events:
      - http:
          path: remove-from-team
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    environment:
      FUNCTION: remove-from-team
      REGION: ${self:provider.region}
      STAGE: ${self:provider.stage}

# Profile
  update-push-token:
    handler: functions/update-push-token.lambda
    description: Register user's push notification token
    role: {"Fn::GetAtt": ["IAMLambdaRole", "Arn"]}
    events:
      - http:
          path: push-tokens
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    environment:
      FUNCTION: update-push-token
      REGION: ${self:provider.region}
      STAGE: ${self:provider.stage}

# Health Status
  create-health-status:
    handler: functions/create-health-status.lambda
    description: Sends new health status for a health check
    role: {"Fn::GetAtt": ["IAMLambdaRole", "Arn"]}
    events:
      - http:
          path: health-status
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    environment:
      FUNCTION: create-health-status
      REGION: ${self:provider.region}
      STAGE: ${self:provider.stage}

# Health Check
  create-health-check:
    handler: functions/health-check/create-health-check.lambda
    description: Create new health check for a team
    role: {"Fn::GetAtt": ["IAMLambdaRole", "Arn"]}
    events:
      - http:
          path: health-check
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    environment:
      FUNCTION: create-health-check
      REGION: ${self:provider.region}
      STAGE: ${self:provider.stage}

  end-health-check:
    handler: functions/health-check/end-health-check.lambda
    description: End the health check and compute results
    role: {"Fn::GetAtt": ["IAMLambdaRole", "Arn"]}
    events:
      - http:
          path: health-check/end
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    environment:
      FUNCTION: end-health-check
      REGION: ${self:provider.region}
      STAGE: ${self:provider.stage}

  get-health-checks:
    handler: functions/health-check/get-health-checks.lambda
    description: Returns array of all ended health checks
    role: {"Fn::GetAtt": ["IAMLambdaRole", "Arn"]}
    events:
      - http:
          path: health-checks
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    environment:
      FUNCTION: get-health-checks
      REGION: ${self:provider.region}
      STAGE: ${self:provider.stage}

  get-health-check-status:
    handler: functions/health-check/get-health-check-status.lambda
    description: |
      Get the current status of health checks for the specified team.
      The function returns information, that health check has ended,
      or list of users who sent the status otherwise.
    role: {"Fn::GetAtt": ["IAMLambdaRole", "Arn"]}
    events:
      - http:
          path: health-check/status
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    environment:
      FUNCTION: get-health-check-status
      REGION: ${self:provider.region}
      STAGE: ${self:provider.stage}

# Triggers
  createProfile:
    handler: functions/triggers/create-profile.lambda
    description: Create user profile with id the same as Cognito UID
    role: {"Fn::GetAtt": ["IAMLambdaRole", "Arn"]}
    environment:
      FUNCTION: create-profile
      REGION: ${self:provider.region}
      STAGE: ${self:provider.stage}

resources:
  Resources:

#   Database
    TeamsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: HC-${self:provider.stage}-Teams
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: code
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: gsi_code
            KeySchema:
              - AttributeName: code
                KeyType: HASH
            Projection:
              ProjectionType: KEYS_ONLY
    ProfilesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: HC-${self:provider.stage}-Profiles
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    HealthChecksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: HC-${self:provider.stage}-HealthChecks
        AttributeDefinitions:
          - AttributeName: team_id
            AttributeType: S
          - AttributeName: date
            AttributeType: N
        KeySchema:
          - AttributeName: team_id
            KeyType: HASH
          - AttributeName: date
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
    HealthStatusesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: HC-${self:provider.stage}-HealthStatuses
        AttributeDefinitions:
          - AttributeName: health_check_id
            AttributeType: S
          - AttributeName: user_id
            AttributeType: S
        KeySchema:
          - AttributeName: health_check_id
            KeyType: HASH
          - AttributeName: user_id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

#   IAM
    IAMLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: Allow
              Principal:
                Service:
                  - "lambda.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AWSLambdaFullAccess
        RoleName: HC_${self:provider.stage}_lambda

#   API
    API:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: HC-${self:provider.stage}-API

#   Cognito
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: false
            RequireUppercase: true
        Schema:
          - AttributeDataType: String
            Mutable: true
            Name: name
            Required: true
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        UserPoolName: HC-${self:provider.stage}-UserPool
        LambdaConfig:
          PreSignUp: { "Fn::GetAtt": ["CreateProfileLambdaFunction", "Arn" ] }
        UserPoolTags:
          PROJECT: HealthCheck
    UserPoolLambdaInvokePermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:invokeFunction
        Principal: cognito-idp.amazonaws.com
        FunctionName: ${self:service}-${self:provider.stage}-createProfile
        SourceArn:
          Fn::GetAtt:
            - UserPool
            - Arn
    UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: Mobile
        GenerateSecret: false
        UserPoolId:
          Ref: UserPool

#   API - Cognito integration
    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        AuthorizerResultTtlInSeconds: 300
        IdentitySource: method.request.header.Authorization
        Name: HealthCheckCognito
        RestApiId:
          Ref: API
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt:
            - UserPool
            - Arn

#   SNS
    NewProfileCreatedTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: ${self:provider.stage}-'New profile created'
        Subscription:
          - Endpoint: https://hooks.slack.com/services/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
            Protocol: https
        TopicName: ${self:provider.stage}-new-profile-created
