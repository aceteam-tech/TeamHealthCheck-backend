service: HealthCheck
frameworkVersion: ">=1.32.0 < 2.0.0"
plugins:
  - serverless-pseudo-parameters
  - serverless-plugin-optimize

provider:
  name: aws
  runtime: nodejs8.10
  region: ${opt:region, 'eu-west-2'}
  memorySize: 128
  tags:
    PROJECT: "Simple Poker"
    REGION: ${self:provider.region}
  stage: ${opt:stage, 'dev'}
package:
  individually: true
  exclude:
    - package.json
    - package-lock.json
functions:
  get-my-teams:
    handler: functions/get-my-teams.lambda
    description: Returns users teams
    role: arn:aws:iam::771291245740:role/HealthCheck_lambda
    events:
      - http:
          path: my-teams
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    environment:
      FUNCTION: get-user-teams
      REGION: ${self:provider.region}
      STAGE: ${self:provider.stage}
  create-team:
    handler: functions/create-team.lambda
    description: Create a new team and assign the user who creates it
    role: arn:aws:iam::771291245740:role/HealthCheck_lambda
    events:
      - http:
          path: my-teams
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    environment:
      FUNCTION: create-team
      REGION: ${self:provider.region}
      STAGE: ${self:provider.stage}
  create-health-status:
    handler: functions/create-health-status.lambda
    description: Sends new health status for a health check
    role: arn:aws:iam::771291245740:role/HealthCheck_lambda
    events:
      - http:
          path: health-status
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    environment:
      FUNCTION: create-health-status
      REGION: ${self:provider.region}
      STAGE: ${self:provider.stage}
  create-health-check:
    handler: functions/create-health-check.lambda
    description: Create new health check for a team
    role: arn:aws:iam::771291245740:role/HealthCheck_lambda
    events:
      - http:
          path: health-check
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    environment:
      FUNCTION: create-health-check
      REGION: ${self:provider.region}
      STAGE: ${self:provider.stage}
  end-health-check:
    handler: functions/end-health-check.lambda
    description: End the health check and compute results
    role: arn:aws:iam::771291245740:role/HealthCheck_lambda
    events:
      - http:
          path: health-check/end
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    environment:
      FUNCTION: end-health-check
      REGION: ${self:provider.region}
      STAGE: ${self:provider.stage}
  create-profile:
    handler: functions/create-profile.lambda
    description: Create user profile with id the same as Cognito UID
    role: arn:aws:iam::771291245740:role/HealthCheck_lambda
    environment:
      FUNCTION: create-profile
      REGION: ${self:provider.region}
      STAGE: ${self:provider.stage}
resources:
  Resources:
    TeamsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: HC-${self:provider.stage}-Teams
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    TablesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: HC-${self:provider.stage}-Profiles
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    HealthChecksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: HC-${self:provider.stage}-HealthChecks
        AttributeDefinitions:
          - AttributeName: team_id
            AttributeType: S
          - AttributeName: date
            AttributeType: N
        KeySchema:
          - AttributeName: team_id
            KeyType: HASH
          - AttributeName: date
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        AuthorizerResultTtlInSeconds: 300
        IdentitySource: method.request.header.Authorization
        Name: HealthCheckCognito
        RestApiId: z4evuu990j
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - arn:aws:cognito-idp:eu-west-2:771291245740:userpool/eu-west-2_yHlHtMIYI