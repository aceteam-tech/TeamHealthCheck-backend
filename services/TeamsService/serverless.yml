service: 'HC-TeamService'
frameworkVersion: ">=1.32.0 < 2.0.0"
plugins:
  - 'serverless-pseudo-parameters'
  - 'serverless-plugin-optimize'
  - 'serverless-export-env'

custom:
  teamsTableName: HC-${self:provider.stage}-TeamsTable
  profilesTableName: HC-${self:provider.stage}-ProfilesTable
  authorizerId:
    Fn::ImportValue: HTTPAuthorizer-ID-${self:provider.stage}
  roleId:
    Fn::ImportValue: IAMLambdaRole-ARN-${self:provider.stage}

provider:
  name: 'aws'
  runtime: 'nodejs8.10'
  region: ${opt:region, 'eu-west-2'}
  memorySize: '128'
  stage: ${opt:stage, 'ws'}
  apiGateway:
    restApiId: !ImportValue HttpAPI-ID-${self:provider.stage}
    restApiRootResourceId: !ImportValue HttpAPI-RootResourceId-${self:provider.stage}

package:
  individually: 'true'
  exclude:
    - 'package.json'
    - 'package-lock.json'

functions:
  getMyTeams:
    handler: 'handlers/get-my-teams/get-my-teams.lambda'
    description: 'Returns users teams'
    role: ${self:custom.roleId}
    events:
      - http:
          path: 'teams'
          method: 'GET'
          authorizer:
            type: 'COGNITO_USER_POOLS'
            authorizerId: ${self:custom.authorizerId}
    environment:
      FUNCTION: 'getMyTeams'
      PROFILES_TABLE: ${self:custom.profilesTableName}
      TEAMS_TABLE: ${self:custom.teamsTableName}
      REGION: ${self:provider.region}
      STAGE: ${self:provider.stage}

  createTeam:
    handler: 'handlers/create-team/create-team.lambda'
    description: 'Create a new team and assign the user who creates it'
    role: ${self:custom.roleId}
    events:
      - http:
          path: 'teams'
          method: 'POST'
          authorizer:
            type: 'COGNITO_USER_POOLS'
            authorizerId: ${self:custom.authorizerId}
    environment:
      FUNCTION: 'createTeam'
      PROFILES_TABLE: ${self:custom.profilesTableName}
      TEAMS_TABLE: ${self:custom.teamsTableName}
      REGION: ${self:provider.region}
      STAGE: ${self:provider.stage}

  joinTeam:
    handler: 'handlers/join-team/join-team.lambda'
    description: 'Assign user to the team'
    role: ${self:custom.roleId}
    events:
      - http:
          path: 'teams/members'
          method: 'POST'
          authorizer:
            type: 'COGNITO_USER_POOLS'
            authorizerId: ${self:custom.authorizerId}
    environment:
      FUNCTION: 'joinTeam'
      PROFILES_TABLE: ${self:custom.profilesTableName}
      TEAMS_TABLE: ${self:custom.teamsTableName}
      REGION: ${self:provider.region}
      STAGE: ${self:provider.stage}
      NOTIFY_TEAM_TOPIC: !ImportValue NotifyTeamTopic-Arn-${self:provider.stage}

  removeFromTeam:
    handler: 'handlers/remove-from-team/remove-from-team.lambda'
    description: 'Remove user from the team'
    role: ${self:custom.roleId}
    events:
      - http:
          path: 'teams/{teamId}/members'
          method: 'DELETE'
          authorizer:
            type: 'COGNITO_USER_POOLS'
            authorizerId: ${self:custom.authorizerId}
    environment:
      FUNCTION: 'removeFromTeam'
      PROFILES_TABLE: ${self:custom.profilesTableName}
      TEAMS_TABLE: ${self:custom.teamsTableName}
      REGION: ${self:provider.region}
      STAGE: ${self:provider.stage}
      NOTIFY_TEAM_TOPIC: !ImportValue NotifyTeamTopic-Arn-${self:provider.stage}
      CALL_SOCKET_TOPIC: !ImportValue CallSocketTopic-Arn-${self:provider.stage}

resources:
  Resources:
    TeamsTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.teamsTableName}
        AttributeDefinitions:
          - AttributeName: 'id'
            AttributeType: 'S'
          - AttributeName: 'code'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'id'
            KeyType: 'HASH'
        BillingMode: 'PAY_PER_REQUEST'
        GlobalSecondaryIndexes:
          - IndexName: 'gsi_code'
            KeySchema:
              - AttributeName: 'code'
                KeyType: 'HASH'
            Projection:
              ProjectionType: 'KEYS_ONLY'