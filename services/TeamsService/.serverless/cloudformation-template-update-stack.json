{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "GetMyTeamsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/HC-TeamService-ws-getMyTeams"
      }
    },
    "CreateTeamLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/HC-TeamService-ws-createTeam"
      }
    },
    "JoinTeamLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/HC-TeamService-ws-joinTeam"
      }
    },
    "RemoveFromTeamLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/HC-TeamService-ws-removeFromTeam"
      }
    },
    "GetMyTeamsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/HC-TeamService/ws/1558896451606-2019-05-26T18:47:31.606Z/getMyTeams.zip"
        },
        "FunctionName": "HC-TeamService-ws-getMyTeams",
        "Handler": "_optimize/HC-TeamService-ws-getMyTeams/handlers/get-my-teams/get-my-teams.lambda",
        "MemorySize": 128,
        "Role": {
          "Fn::ImportValue": "IAMLambdaRole-ARN-ws"
        },
        "Runtime": "nodejs8.10",
        "Timeout": 6,
        "Description": "Returns users teams",
        "Tags": [
          {
            "Key": "PROJECT",
            "Value": "HealthCheck"
          },
          {
            "Key": "REGION",
            "Value": "eu-west-2"
          }
        ],
        "Environment": {
          "Variables": {
            "FUNCTION": "getMyTeams",
            "PROFILES_TABLE": "HC-ws-ProfilesTable",
            "TEAMS_TABLE": "HC-ws-TeamsTable",
            "REGION": "eu-west-2",
            "STAGE": "ws"
          }
        }
      },
      "DependsOn": [
        "GetMyTeamsLogGroup"
      ]
    },
    "GetMyTeamsLambdaVersionaLnSyxPJcGZKHhhmG6ATJlymMcotVeaUBsv7FWcME": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetMyTeamsLambdaFunction"
        },
        "CodeSha256": "4zGgRNtnWc8PYXsOBFZGlFfQpp0X2JUK0/d+BXk6BZo=",
        "Description": "Returns users teams"
      }
    },
    "CreateTeamLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/HC-TeamService/ws/1558896451606-2019-05-26T18:47:31.606Z/createTeam.zip"
        },
        "FunctionName": "HC-TeamService-ws-createTeam",
        "Handler": "_optimize/HC-TeamService-ws-createTeam/handlers/create-team/create-team.lambda",
        "MemorySize": 128,
        "Role": {
          "Fn::ImportValue": "IAMLambdaRole-ARN-ws"
        },
        "Runtime": "nodejs8.10",
        "Timeout": 6,
        "Description": "Create a new team and assign the user who creates it",
        "Tags": [
          {
            "Key": "PROJECT",
            "Value": "HealthCheck"
          },
          {
            "Key": "REGION",
            "Value": "eu-west-2"
          }
        ],
        "Environment": {
          "Variables": {
            "FUNCTION": "createTeam",
            "PROFILES_TABLE": "HC-ws-ProfilesTable",
            "TEAMS_TABLE": "HC-ws-TeamsTable",
            "REGION": "eu-west-2",
            "STAGE": "ws"
          }
        }
      },
      "DependsOn": [
        "CreateTeamLogGroup"
      ]
    },
    "CreateTeamLambdaVersionHmxvRjqbBTqjcY9gtUwxFgtJHjWJsVL7q96rMtgm1Y": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateTeamLambdaFunction"
        },
        "CodeSha256": "mH3Avi1k1LO+x1jC7hKLWlSDNOh3tSRqXYUeQ7mAd3s=",
        "Description": "Create a new team and assign the user who creates it"
      }
    },
    "JoinTeamLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/HC-TeamService/ws/1558896451606-2019-05-26T18:47:31.606Z/joinTeam.zip"
        },
        "FunctionName": "HC-TeamService-ws-joinTeam",
        "Handler": "_optimize/HC-TeamService-ws-joinTeam/handlers/join-team/join-team.lambda",
        "MemorySize": 128,
        "Role": {
          "Fn::ImportValue": "IAMLambdaRole-ARN-ws"
        },
        "Runtime": "nodejs8.10",
        "Timeout": 6,
        "Description": "Assign user to the team",
        "Tags": [
          {
            "Key": "PROJECT",
            "Value": "HealthCheck"
          },
          {
            "Key": "REGION",
            "Value": "eu-west-2"
          }
        ],
        "Environment": {
          "Variables": {
            "FUNCTION": "joinTeam",
            "PROFILES_TABLE": "HC-ws-ProfilesTable",
            "TEAMS_TABLE": "HC-ws-TeamsTable",
            "REGION": "eu-west-2",
            "STAGE": "ws"
          }
        }
      },
      "DependsOn": [
        "JoinTeamLogGroup"
      ]
    },
    "JoinTeamLambdaVersiond3rsQxJ3tTeuPcJLXlFV3KkFY3PE3rHTOo0vcEtW2A": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "JoinTeamLambdaFunction"
        },
        "CodeSha256": "xoSdUY99lRoSnL00PI7yi5exwLG2lbCVUd0MNrljLTE=",
        "Description": "Assign user to the team"
      }
    },
    "RemoveFromTeamLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/HC-TeamService/ws/1558896451606-2019-05-26T18:47:31.606Z/removeFromTeam.zip"
        },
        "FunctionName": "HC-TeamService-ws-removeFromTeam",
        "Handler": "_optimize/HC-TeamService-ws-removeFromTeam/handlers/remove-from-team/remove-from-team.lambda",
        "MemorySize": 128,
        "Role": {
          "Fn::ImportValue": "IAMLambdaRole-ARN-ws"
        },
        "Runtime": "nodejs8.10",
        "Timeout": 6,
        "Description": "Remove user from the team",
        "Tags": [
          {
            "Key": "PROJECT",
            "Value": "HealthCheck"
          },
          {
            "Key": "REGION",
            "Value": "eu-west-2"
          }
        ],
        "Environment": {
          "Variables": {
            "FUNCTION": "removeFromTeam",
            "PROFILES_TABLE": "HC-ws-ProfilesTable",
            "TEAMS_TABLE": "HC-ws-TeamsTable",
            "REGION": "eu-west-2",
            "STAGE": "ws"
          }
        }
      },
      "DependsOn": [
        "RemoveFromTeamLogGroup"
      ]
    },
    "RemoveFromTeamLambdaVersionSyA0GlGzZHpRZDjObqEgtZvdSva2LeENt8ZhfbBDE4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "RemoveFromTeamLambdaFunction"
        },
        "CodeSha256": "z/mlE7CtkmOBgqkeakONOvr5+EinOAYmhqfDylHSRNc=",
        "Description": "Remove user from the team"
      }
    },
    "ApiGatewayResourceTeams": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::ImportValue": "HttpAPI-RootResourceId-ws"
        },
        "PathPart": "teams",
        "RestApiId": {
          "Fn::ImportValue": "HttpAPI-ID-ws"
        }
      }
    },
    "ApiGatewayResourceTeamsTeamidVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceTeams"
        },
        "PathPart": "{teamId}",
        "RestApiId": {
          "Fn::ImportValue": "HttpAPI-ID-ws"
        }
      }
    },
    "ApiGatewayResourceTeamsTeamidVarMembers": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceTeamsTeamidVar"
        },
        "PathPart": "members",
        "RestApiId": {
          "Fn::ImportValue": "HttpAPI-ID-ws"
        }
      }
    },
    "ApiGatewayMethodTeamsGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceTeams"
        },
        "RestApiId": {
          "Fn::ImportValue": "HttpAPI-ID-ws"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Fn::ImportValue": "HTTPAuthorizer-ID-ws"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetMyTeamsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodTeamsPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceTeams"
        },
        "RestApiId": {
          "Fn::ImportValue": "HttpAPI-ID-ws"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Fn::ImportValue": "HTTPAuthorizer-ID-ws"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateTeamLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodTeamsTeamidVarMembersPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceTeamsTeamidVarMembers"
        },
        "RestApiId": {
          "Fn::ImportValue": "HttpAPI-ID-ws"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Fn::ImportValue": "HTTPAuthorizer-ID-ws"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "JoinTeamLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodTeamsTeamidVarMembersDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceTeamsTeamidVarMembers"
        },
        "RestApiId": {
          "Fn::ImportValue": "HttpAPI-ID-ws"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Fn::ImportValue": "HTTPAuthorizer-ID-ws"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "RemoveFromTeamLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayDeployment1558896407606": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Fn::ImportValue": "HttpAPI-ID-ws"
        },
        "StageName": "ws"
      },
      "DependsOn": [
        "ApiGatewayMethodTeamsGet",
        "ApiGatewayMethodTeamsPost",
        "ApiGatewayMethodTeamsTeamidVarMembersPost",
        "ApiGatewayMethodTeamsTeamidVarMembersDelete"
      ]
    },
    "GetMyTeamsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetMyTeamsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": {
          "Fn::Join": [
            "",
            [
              "apigateway.",
              {
                "Ref": "AWS::URLSuffix"
              }
            ]
          ]
        },
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Fn::ImportValue": "HttpAPI-ID-ws"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CreateTeamLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateTeamLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": {
          "Fn::Join": [
            "",
            [
              "apigateway.",
              {
                "Ref": "AWS::URLSuffix"
              }
            ]
          ]
        },
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Fn::ImportValue": "HttpAPI-ID-ws"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "JoinTeamLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "JoinTeamLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": {
          "Fn::Join": [
            "",
            [
              "apigateway.",
              {
                "Ref": "AWS::URLSuffix"
              }
            ]
          ]
        },
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Fn::ImportValue": "HttpAPI-ID-ws"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "RemoveFromTeamLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RemoveFromTeamLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": {
          "Fn::Join": [
            "",
            [
              "apigateway.",
              {
                "Ref": "AWS::URLSuffix"
              }
            ]
          ]
        },
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Fn::ImportValue": "HttpAPI-ID-ws"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "TeamsTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "HC-ws-TeamsTable",
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          },
          {
            "AttributeName": "code",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "gsi_code",
            "KeySchema": [
              {
                "AttributeName": "code",
                "KeyType": "HASH"
              }
            ],
            "Projection": {
              "ProjectionType": "KEYS_ONLY"
            }
          }
        ]
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      }
    },
    "GetMyTeamsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetMyTeamsLambdaVersionaLnSyxPJcGZKHhhmG6ATJlymMcotVeaUBsv7FWcME"
      }
    },
    "CreateTeamLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateTeamLambdaVersionHmxvRjqbBTqjcY9gtUwxFgtJHjWJsVL7q96rMtgm1Y"
      }
    },
    "JoinTeamLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "JoinTeamLambdaVersiond3rsQxJ3tTeuPcJLXlFV3KkFY3PE3rHTOo0vcEtW2A"
      }
    },
    "RemoveFromTeamLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "RemoveFromTeamLambdaVersionSyA0GlGzZHpRZDjObqEgtZvdSva2LeENt8ZhfbBDE4"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Fn::ImportValue": "HttpAPI-ID-ws"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/ws"
          ]
        ]
      }
    }
  }
}